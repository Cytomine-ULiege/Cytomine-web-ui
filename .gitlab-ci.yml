stages:
  - prepare
  - build
  - publish

# variable to register in project:
# - DOCKERHUB_URL: url of dockerhub (e.g. docker.io)
# - DOCKERHUB_USER: cytomine username on dockerhub
# - DOCKERHUB_PASSWORD: cytomine password on dockerhub
# - SCRIPTS_REPO_ACCESS_TOKEN_NAME: access token name for docker-entrypoint-scripts repo
# - SCRIPTS_REPO_ACCESS_TOKEN_VALUE: access token value for docker-entrypoint-scripts repo
# - SCRIPTS_REPO_URL: git url (no scheme/protocol) of the docker-entrypoint-scripts repo

variables:
  DOCKER_TMP_IMAGE_NAME: $CI_PIPELINE_ID:latest

default:
  tags:
    - docker

workflow:
  rules:
    - if: $CI_COMMIT_TAG != null && $CI_COMMIT_TAG =~ /^ce-.*$/
      variables:
        IS_OPEN_SOURCE_RELEASE_CANDIDATE: "true"
    - if: $CI_COMMIT_TAG == null || $CI_COMMIT_REF_NAME !~ /^ce-.*$/
      variables:
        IS_OPEN_SOURCE_RELEASE_CANDIDATE: "false"
    - when: always

make-version-name:
  stage: prepare
  # regex check does not work with /bin/sh because of parenthesis so we need /bin/bash here
  image: bash:5.2.15-alpine3.16
  script:
    - if [[ "$CI_COMMIT_REF_NAME" =~ ^refs/tags/ ]] then
        echo "CM_VERSION=$CI_COMMIT_TAG" > .env;
      else
        echo "CM_VERSION=$CI_COMMIT_SHORT_SHA-$(date '+%Y%m%d%H%M%S')-SNAPSHOT" > .env;
      fi
    - cat .env
  artifacts:
    reports:
      dotenv: .env

build-docker-image:
  stage: build
  image: docker:latest
  needs:
    - job: make-version-name
      artifacts: true
  script:
    - export SCRIPTS_REPO_FULL_URL=https://$SCRIPTS_REPO_ACCESS_TOKEN_NAME:$SCRIPTS_REPO_ACCESS_TOKEN_VALUE@$SCRIPTS_REPO_URL
    - docker build -t $DOCKER_TMP_IMAGE_NAME -f docker/Dockerfile .

publish-docker-image:
  stage: publish
  image: docker:latest
  needs:
    - job: build-docker-image
      artifacts: false  # artifact are in docker cache (is it a safe assumption in a multi-runner env ?)
    - job: make-version-name
      artifacts: true
  script:
    - |
      if [ $IS_OPEN_SOURCE_RELEASE_CANDIDATE = "true" ]; then
        export DOCKER_IMAGE_NAME=cytomine/web-ui
        export TARGET_CI_REGISTRY=$DOCKERHUB_URL
        export TARGET_CI_REGISTRY_USER=$DOCKERHUB_USER
        export TARGET_CI_REGISTRY_PASSWORD=$DOCKERHUB_PASSWORD
      else
        export DOCKER_IMAGE_NAME=$CI_REGISTRY_IMAGE
        export TARGET_CI_REGISTRY=$CI_REGISTRY
        export TARGET_CI_REGISTRY_USER=$CI_REGISTRY_USER
        export TARGET_CI_REGISTRY_PASSWORD=$CI_REGISTRY_PASSWORD
      fi
    - echo "Target > registry:$TARGET_CI_REGISTRY user:$TARGET_CI_REGISTRY_USER"
    - docker login -u $TARGET_CI_REGISTRY_USER -p $TARGET_CI_REGISTRY_PASSWORD $TARGET_CI_REGISTRY
    - export DOCKER_IMAGE_NAME_FULL=$DOCKER_IMAGE_NAME:$CM_VERSION
    - docker tag $DOCKER_TMP_IMAGE_NAME $DOCKER_IMAGE_NAME_FULL
    - docker push $DOCKER_IMAGE_NAME_FULL
    - docker rmi $DOCKER_IMAGE_NAME_FULL
  after_script:
    # cleaning up images
    - docker rmi $DOCKER_TMP_IMAGE_NAME

